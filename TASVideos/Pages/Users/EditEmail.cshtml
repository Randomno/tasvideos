@page "{id}"
@model EditEmailModel
@{
	ViewData.SetTitle($"Editing Email for User: {Model.UserToEdit.UserName}");
}
<danger-alert>
	<p>Be careful changing emails for users! If they are not who they say they are, this allows someone to hijack an account.</p>
	<p>For GDPR and other privacy removals, set something like anonymous@(Model.Id)@@example.com</p>
</danger-alert>
<form method="post">
	<input type="hidden" asp-for="UserToEdit.UserName" />
	<row>
		<column md="5">
			<form-group>
				<label asp-for="UserToEdit.Email"></label>
				<input asp-for="UserToEdit.Email" class="form-control" />
				<span asp-validation-for="UserToEdit.Email" class="text-danger"></span>
			</form-group>
			<form-group>
				<div class="checkbox">
					<label asp-for="UserToEdit.EmailConfirmed">
						<input asp-for="UserToEdit.EmailConfirmed" />
						@Html.DisplayNameFor(m => m.UserToEdit.EmailConfirmed)
					</label>
				</div>
			</form-group>
		</column>
	</row>
	<hr/>
	<div class="text-center">
		<button id="submit-btn" type="submit" class="btn btn-primary"><i class="fa fa-save"></i> Save</button>
		<a asp-page="Edit" asp-route-id="@Model.Id" class="btn btn-secondary"><i class="fa fa-times"></i> Cancel</a>
	</div>
</form>
<script>
	"use strict"
	const emailConfirmedBox = document.getElementById('@Html.IdFor(m => m.UserToEdit.EmailConfirmed)')
	document
		.getElementById('@Html.IdFor(m => m.UserToEdit.Email)')
		.addEventListener('change', () => { emailConfirmedBox.checked = false })
</script>